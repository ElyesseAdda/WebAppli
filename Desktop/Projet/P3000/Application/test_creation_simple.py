#!/usr/bin/env python
"""
Script de test simplifi√© pour la cr√©ation automatique des dossiers S3
Teste uniquement la cr√©ation automatique (sans transformation complexe)
"""

import os
import sys
import django
from datetime import datetime

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Application.settings')
django.setup()

from api.models import Societe, AppelOffres, Chantier
from api.drive_automation import drive_automation
from api.utils import list_s3_folders, list_s3_folder_content

def print_header(title):
    """Affiche un en-t√™te format√©"""
    print(f"\n{'='*60}")
    print(f"üß™ {title}")
    print(f"{'='*60}")

def print_test_result(test_name, success, details=""):
    """Affiche le r√©sultat d'un test"""
    status = "‚úÖ PASS" if success else "‚ùå FAIL"
    print(f"{status} {test_name}")
    if details:
        print(f"   üìù {details}")

def test_1_creation_societe():
    """Test 1: Cr√©ation d'une soci√©t√© de test"""
    print_header("TEST 1: Cr√©ation d'une soci√©t√© de test")
    
    try:
        # Cr√©er une soci√©t√© de test
        societe = Societe.objects.create(
            nom_societe="Soci√©t√© Test Simple",
            ville_societe="Ville Test",
            rue_societe="Rue Test",
            codepostal_societe="12345",
            client_name_id=1  # Assurez-vous qu'un client existe
        )
        
        print_test_result(
            "Cr√©ation soci√©t√©", 
            True, 
            f"Soci√©t√© cr√©√©e: {societe.nom_societe} (ID: {societe.id})"
        )
        
        return societe
        
    except Exception as e:
        print_test_result(
            "Cr√©ation soci√©t√©", 
            False, 
            f"Erreur: {str(e)}"
        )
        return None

def test_2_creation_appel_offres():
    """Test 2: Cr√©ation d'un appel d'offres (d√©clenche la cr√©ation automatique des dossiers S3)"""
    print_header("TEST 2: Cr√©ation d'un appel d'offres")
    
    try:
        # R√©cup√©rer la soci√©t√© cr√©√©e
        societe = Societe.objects.filter(nom_societe="Soci√©t√© Test Simple").first()
        if not societe:
            print_test_result(
                "Cr√©ation appel d'offres", 
                False, 
                "Soci√©t√© de test non trouv√©e"
            )
            return None
        
        # Cr√©er un appel d'offres
        appel_offres = AppelOffres.objects.create(
            chantier_name="Appel d'offres Test Simple",
            societe=societe,
            ville="Ville Test",
            rue="Rue Test",
            code_postal="12345",
            statut='en_attente'
        )
        
        print_test_result(
            "Cr√©ation appel d'offres", 
            True, 
            f"Appel d'offres cr√©√©: {appel_offres.chantier_name} (ID: {appel_offres.id})"
        )
        
        # Attendre un peu pour que les signaux se d√©clenchent
        import time
        time.sleep(2)
        
        return appel_offres
        
    except Exception as e:
        print_test_result(
            "Cr√©ation appel d'offres", 
            False, 
            f"Erreur: {str(e)}"
        )
        return None

def test_3_verification_dossiers_appel_offres():
    """Test 3: V√©rification que les dossiers S3 ont √©t√© cr√©√©s automatiquement"""
    print_header("TEST 3: V√©rification des dossiers S3 cr√©√©s automatiquement")
    
    try:
        # R√©cup√©rer l'appel d'offres cr√©√©
        appel_offres = AppelOffres.objects.filter(chantier_name="Appel d'offres Test Simple").first()
        if not appel_offres:
            print_test_result(
                "V√©rification dossiers", 
                False, 
                "Appel d'offres de test non trouv√©"
            )
            return False
        
        # Construire le chemin attendu
        expected_path = f"Appels_Offres/socit-test-simple/{appel_offres.id:03d}_appel-doffres-test-simple"
        
        # V√©rifier que le dossier existe dans S3
        all_folders = list_s3_folders('')
        folder_exists = any(folder['path'] == expected_path for folder in all_folders)
        
        print_test_result(
            "Dossier principal cr√©√©", 
            folder_exists, 
            f"Chemin attendu: {expected_path}"
        )
        
        if folder_exists:
            # V√©rifier le contenu du dossier
            content = list_s3_folder_content(expected_path)
            subfolders_created = len(content['folders']) > 0
            
            print_test_result(
                "Sous-dossiers cr√©√©s", 
                subfolders_created, 
                f"Nombre de sous-dossiers: {len(content['folders'])}"
            )
            
            # Afficher les sous-dossiers cr√©√©s
            if content['folders']:
                print("\nüìÅ Sous-dossiers cr√©√©s:")
                for folder in content['folders']:
                    print(f"   üìÅ {folder['name']}")
            
            return folder_exists and subfolders_created
        else:
            return False
        
    except Exception as e:
        print_test_result(
            "V√©rification dossiers", 
            False, 
            f"Erreur: {str(e)}"
        )
        return False

def test_4_creation_chantier_direct():
    """Test 4: Cr√©ation directe d'un chantier (teste la cr√©ation automatique des dossiers chantier)"""
    print_header("TEST 4: Cr√©ation directe d'un chantier")
    
    try:
        # R√©cup√©rer la soci√©t√©
        societe = Societe.objects.filter(nom_societe="Soci√©t√© Test Simple").first()
        if not societe:
            print_test_result(
                "Cr√©ation chantier", 
                False, 
                "Soci√©t√© de test non trouv√©e"
            )
            return None
        
        # Cr√©er un chantier directement
        chantier = Chantier.objects.create(
            chantier_name="Chantier Test Simple",
            societe=societe,
            ville="Ville Test",
            rue="Rue Test",
            code_postal="12345"
        )
        
        print_test_result(
            "Cr√©ation chantier", 
            True, 
            f"Chantier cr√©√©: {chantier.chantier_name} (ID: {chantier.id})"
        )
        
        # Attendre un peu pour que les signaux se d√©clenchent
        import time
        time.sleep(2)
        
        return chantier
        
    except Exception as e:
        print_test_result(
            "Cr√©ation chantier", 
            False, 
            f"Erreur: {str(e)}"
        )
        return None

def test_5_verification_dossiers_chantier():
    """Test 5: V√©rification des dossiers S3 du chantier cr√©√©s automatiquement"""
    print_header("TEST 5: V√©rification des dossiers S3 du chantier")
    
    try:
        # R√©cup√©rer le chantier cr√©√©
        chantier = Chantier.objects.filter(chantier_name="Chantier Test Simple").first()
        if not chantier:
            print_test_result(
                "V√©rification dossiers chantier", 
                False, 
                "Chantier de test non trouv√©"
            )
            return False
        
        # Construire le chemin attendu du chantier (utilise maintenant "Soci√©t√©s")
        expected_chantier_path = f"Soci√©t√©s/socit-test-simple/chantier-test-simple"
        
        # V√©rifier que le dossier chantier existe
        all_folders = list_s3_folders('')
        chantier_folder_exists = any(folder['path'] == expected_chantier_path for folder in all_folders)
        
        print_test_result(
            "Dossier chantier cr√©√©", 
            chantier_folder_exists, 
            f"Chemin attendu: {expected_chantier_path}"
        )
        
        if chantier_folder_exists:
            # V√©rifier le contenu du dossier chantier
            content = list_s3_folder_content(expected_chantier_path)
            subfolders_created = len(content['folders']) > 0
            
            print_test_result(
                "Sous-dossiers chantier cr√©√©s", 
                subfolders_created, 
                f"Nombre de sous-dossiers: {len(content['folders'])}"
            )
            
            # Afficher les sous-dossiers cr√©√©s
            if content['folders']:
                print("\nüìÅ Sous-dossiers du chantier:")
                for folder in content['folders']:
                    print(f"   üìÅ {folder['name']}")
            
            return chantier_folder_exists and subfolders_created
        else:
            return False
        
    except Exception as e:
        print_test_result(
            "V√©rification dossiers chantier", 
            False, 
            f"Erreur: {str(e)}"
        )
        return False

def test_6_nettoyage():
    """Test 6: Nettoyage des donn√©es de test"""
    print_header("TEST 6: Nettoyage des donn√©es de test")
    
    try:
        # Supprimer le chantier
        chantier = Chantier.objects.filter(chantier_name="Chantier Test Simple").first()
        if chantier:
            chantier.delete()
            print_test_result(
                "Suppression chantier", 
                True, 
                "Chantier supprim√©"
            )
        
        # Supprimer l'appel d'offres
        appel_offres = AppelOffres.objects.filter(chantier_name="Appel d'offres Test Simple").first()
        if appel_offres:
            appel_offres.delete()
            print_test_result(
                "Suppression appel d'offres", 
                True, 
                "Appel d'offres supprim√©"
            )
        
        # Supprimer la soci√©t√©
        societe = Societe.objects.filter(nom_societe="Soci√©t√© Test Simple").first()
        if societe:
            societe.delete()
            print_test_result(
                "Suppression soci√©t√©", 
                True, 
                "Soci√©t√© supprim√©e"
            )
        
        return True
        
    except Exception as e:
        print_test_result(
            "Nettoyage", 
            False, 
            f"Erreur: {str(e)}"
        )
        return False

def main():
    """Fonction principale de test"""
    print("üöÄ D√âMARRAGE DES TESTS SIMPLIFI√âS DE CR√âATION AUTOMATIQUE DES DOSSIERS S3")
    print(f"‚è∞ Heure de d√©but: {datetime.now().strftime('%H:%M:%S')}")
    
    # Ex√©cuter tous les tests
    test_results = []
    
    # Test 1: Cr√©ation soci√©t√©
    societe = test_1_creation_societe()
    test_results.append(societe is not None)
    
    # Test 2: Cr√©ation appel d'offres
    appel_offres = test_2_creation_appel_offres()
    test_results.append(appel_offres is not None)
    
    # Test 3: V√©rification dossiers appel d'offres
    test_results.append(test_3_verification_dossiers_appel_offres())
    
    # Test 4: Cr√©ation chantier direct
    chantier = test_4_creation_chantier_direct()
    test_results.append(chantier is not None)
    
    # Test 5: V√©rification dossiers chantier
    test_results.append(test_5_verification_dossiers_chantier())
    
    # Test 6: Nettoyage
    test_results.append(test_6_nettoyage())
    
    # R√©sum√© final
    print_header("R√âSUM√â FINAL")
    passed_tests = sum(test_results)
    total_tests = len(test_results)
    
    print(f"üìä R√©sultats des tests simplifi√©s:")
    print(f"   ‚úÖ Tests r√©ussis: {passed_tests}/{total_tests}")
    print(f"   ‚ùå Tests √©chou√©s: {total_tests - passed_tests}/{total_tests}")
    
    if passed_tests == total_tests:
        print("üéâ TOUS LES TESTS SONT PASS√âS ! La cr√©ation automatique des dossiers S3 fonctionne parfaitement !")
        print("üöÄ Votre syst√®me est pr√™t pour la production !")
    else:
        print("‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus.")
        print("üîß V√©rifiez la configuration AWS S3 et les signaux Django.")
    
    print(f"‚è∞ Heure de fin: {datetime.now().strftime('%H:%M:%S')}")
    
    return passed_tests == total_tests

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
