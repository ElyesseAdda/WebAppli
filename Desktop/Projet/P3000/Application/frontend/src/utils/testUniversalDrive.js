/**
 * Script de test pour le syst√®me universel de g√©n√©ration PDF Drive
 * Ce fichier peut √™tre supprim√© apr√®s les tests
 */

import {
  generatePDFDrive,
  getSupportedDocumentTypes,
  isDocumentTypeSupported,
} from "./universalDriveGenerator";

// Fonction de test pour les devis de chantier
export const testDevisChantier = async () => {
  console.log("üß™ Test du syst√®me universel pour les devis de chantier");

  // Donn√©es de test (remplacez par de vraies donn√©es)
  const testData = {
    devisId: 15, // Remplacez par un ID de devis existant
    appelOffresId: 19, // Remplacez par un ID d'appel d'offres existant
    appelOffresName: "Test Url", // Remplacez par un nom d'appel d'offres existant
    societeName: "IMMOBILIERE DE LANFANT", // Remplacez par un nom de soci√©t√© existant
    numero: "DEV-015-25 - Test Url", // Remplacez par un num√©ro de devis existant
  };

  try {
    console.log("üìã Donn√©es de test:", testData);

    // Test 1: G√©n√©ration normale (peut d√©tecter un conflit)
    console.log("üöÄ Test 1: G√©n√©ration normale");
    await generatePDFDrive("devis_chantier", testData, {
      onSuccess: (response) => {
        console.log("‚úÖ Test 1 r√©ussi:", response);
      },
      onError: (error) => {
        console.log("‚ùå Test 1 √©chou√©:", error);
      },
    });

    // Attendre 2 secondes
    await new Promise((resolve) => setTimeout(resolve, 2000));

    // Test 2: G√©n√©ration avec remplacement forc√©
    console.log("üöÄ Test 2: G√©n√©ration avec remplacement forc√©");
    await generatePDFDrive(
      "devis_chantier",
      testData,
      {
        onSuccess: (response) => {
          console.log("‚úÖ Test 2 r√©ussi:", response);
        },
        onError: (error) => {
          console.log("‚ùå Test 2 √©chou√©:", error);
        },
      },
      true
    ); // forceReplace = true
  } catch (error) {
    console.error("‚ùå Erreur lors des tests:", error);
  }
};

// Fonction de test pour v√©rifier les types support√©s
export const testSupportedTypes = () => {
  console.log("üß™ Test des types de documents support√©s");

  const supportedTypes = getSupportedDocumentTypes();
  console.log("üìã Types support√©s:", supportedTypes);

  // Test de validation
  console.log("üîç Test de validation:");
  console.log(
    "- devis_chantier support√©:",
    isDocumentTypeSupported("devis_chantier")
  );
  console.log("- facture support√©:", isDocumentTypeSupported("facture"));
  console.log(
    "- type_inexistant support√©:",
    isDocumentTypeSupported("type_inexistant")
  );
};

// Fonction de test pour les donn√©es manquantes
export const testMissingData = async () => {
  console.log("üß™ Test avec des donn√©es manquantes");

  const incompleteData = {
    devisId: 15,
    // appelOffresId manquant
    appelOffresName: "Test Url",
    societeName: "IMMOBILIERE DE LANFANT",
  };

  try {
    await generatePDFDrive("devis_chantier", incompleteData, {
      onSuccess: (response) => {
        console.log(
          "‚úÖ Test avec donn√©es manquantes r√©ussi (inattendu):",
          response
        );
      },
      onError: (error) => {
        console.log(
          "‚úÖ Test avec donn√©es manquantes √©chou√© (attendu):",
          error.message
        );
      },
    });
  } catch (error) {
    console.log(
      "‚úÖ Test avec donn√©es manquantes √©chou√© (attendu):",
      error.message
    );
  }
};

// Fonction de test pour un type non support√©
export const testUnsupportedType = async () => {
  console.log("üß™ Test avec un type non support√©");

  const testData = {
    id: 1,
    name: "Test",
  };

  try {
    await generatePDFDrive("type_inexistant", testData, {
      onSuccess: (response) => {
        console.log(
          "‚úÖ Test avec type non support√© r√©ussi (inattendu):",
          response
        );
      },
      onError: (error) => {
        console.log(
          "‚úÖ Test avec type non support√© √©chou√© (attendu):",
          error.message
        );
      },
    });
  } catch (error) {
    console.log(
      "‚úÖ Test avec type non support√© √©chou√© (attendu):",
      error.message
    );
  }
};

// Fonction principale de test
export const runAllTests = async () => {
  console.log("üöÄ D√©marrage de tous les tests du syst√®me universel");
  console.log("=" * 60);

  // Test 1: Types support√©s
  testSupportedTypes();
  console.log("-" * 40);

  // Test 2: Donn√©es manquantes
  await testMissingData();
  console.log("-" * 40);

  // Test 3: Type non support√©
  await testUnsupportedType();
  console.log("-" * 40);

  // Test 4: G√©n√©ration normale (comment√© pour √©viter les conflits)
  // await testDevisChantier();

  console.log("=" * 60);
  console.log("‚úÖ Tous les tests termin√©s");
};

// Export par d√©faut
export default {
  testDevisChantier,
  testSupportedTypes,
  testMissingData,
  testUnsupportedType,
  runAllTests,
};
