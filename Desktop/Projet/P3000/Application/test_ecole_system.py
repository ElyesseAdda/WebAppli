#!/usr/bin/env python3
"""
Script de test pour le syst√®me d'√©v√©nement "√âcole" des alternants
"""

import os
import sys
import django
from datetime import date, datetime

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Application.settings')
django.setup()

from api.models import Agent, Chantier, Event, AgencyExpense, Schedule
from api.ecole_utils import (
    get_or_create_ecole_chantier,
    create_ecole_assignments,
    calculate_ecole_hours_for_agent,
    create_ecole_expense_for_agent,
    recalculate_all_ecole_expenses_for_month
)

def test_ecole_system():
    """Test complet du syst√®me d'√©v√©nement √âcole"""
    
    print("üß™ TEST DU SYST√àME √âCOLE POUR ALTERNANTS")
    print("=" * 50)
    
    # 1. Test de cr√©ation du chantier syst√®me
    print("\n1Ô∏è‚É£ Test de cr√©ation du chantier syst√®me '√âcole'")
    try:
        ecole_chantier = get_or_create_ecole_chantier()
        print(f"‚úÖ Chantier syst√®me cr√©√©/trouv√©: {ecole_chantier.chantier_name} (ID: {ecole_chantier.id})")
        print(f"   - Type: {ecole_chantier.chantier_type}")
        print(f"   - Syst√®me: {ecole_chantier.is_system_chantier}")
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du chantier: {e}")
        return False
    
    # 2. Test avec un agent existant
    print("\n2Ô∏è‚É£ Test avec un agent existant")
    try:
        # R√©cup√©rer le premier agent disponible
        agent = Agent.objects.first()
        if not agent:
            print("‚ùå Aucun agent trouv√© dans la base de donn√©es")
            return False
        
        print(f"‚úÖ Agent s√©lectionn√©: {agent.name} {agent.surname} (ID: {agent.id})")
        print(f"   - Taux horaire: {agent.taux_Horaire}‚Ç¨/h")
        
        # 3. Test de cr√©ation d'assignations d'√©cole
        print("\n3Ô∏è‚É£ Test de cr√©ation d'assignations d'√©cole")
        start_date = date(2024, 1, 15)  # 15 janvier 2024
        end_date = date(2024, 1, 19)    # 19 janvier 2024 (5 jours)
        
        assignments_created = create_ecole_assignments(agent.id, start_date, end_date)
        print(f"‚úÖ {assignments_created} assignations d'√©cole cr√©√©es")
        
        # 4. Test de calcul des heures d'√©cole
        print("\n4Ô∏è‚É£ Test de calcul des heures d'√©cole")
        ecole_hours = calculate_ecole_hours_for_agent(agent.id, 1, 2024)
        print(f"‚úÖ Heures d'√©cole calcul√©es: {ecole_hours}h")
        
        # 5. Test de cr√©ation de d√©pense
        print("\n5Ô∏è‚É£ Test de cr√©ation de d√©pense d'√©cole")
        expense = create_ecole_expense_for_agent(agent.id, 1, 2024)
        if expense:
            print(f"‚úÖ D√©pense cr√©√©e: {expense.description}")
            print(f"   - Montant: {expense.amount}‚Ç¨")
            print(f"   - Heures: {expense.ecole_hours}h")
            print(f"   - Cat√©gorie: {expense.category}")
        else:
            print("‚ÑπÔ∏è Aucune d√©pense cr√©√©e (pas d'heures d'√©cole)")
        
        # 6. Test de recalcul des d√©penses
        print("\n6Ô∏è‚É£ Test de recalcul des d√©penses")
        recalculate_all_ecole_expenses_for_month(1, 2024)
        print("‚úÖ Recalcul des d√©penses effectu√©")
        
        # 7. V√©rification des assignations dans le planning
        print("\n7Ô∏è‚É£ V√©rification des assignations dans le planning")
        ecole_assignments = Schedule.objects.filter(
            agent_id=agent.id,
            chantier_id=ecole_chantier.id
        )
        print(f"‚úÖ {ecole_assignments.count()} assignations trouv√©es dans le planning")
        
        # Afficher quelques exemples
        for assignment in ecole_assignments[:3]:
            print(f"   - {assignment.day} {assignment.hour}: {assignment.chantier.chantier_name}")
        
        print("\nüéâ TOUS LES TESTS SONT PASS√âS AVEC SUCC√àS !")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        import traceback
        traceback.print_exc()
        return False

def cleanup_test_data():
    """Nettoyer les donn√©es de test"""
    print("\nüßπ Nettoyage des donn√©es de test...")
    
    try:
        # Supprimer les assignations d'√©cole de test
        ecole_chantier = Chantier.objects.filter(chantier_type='ecole').first()
        if ecole_chantier:
            Schedule.objects.filter(chantier_id=ecole_chantier.id).delete()
            print("‚úÖ Assignations d'√©cole supprim√©es")
        
        # Supprimer les d√©penses d'√©cole de test
        AgencyExpense.objects.filter(is_ecole_expense=True).delete()
        print("‚úÖ D√©penses d'√©cole supprim√©es")
        
        # Supprimer les √©v√©nements d'√©cole de test
        Event.objects.filter(event_type='ecole').delete()
        print("‚úÖ √âv√©nements d'√©cole supprim√©s")
        
        print("‚úÖ Nettoyage termin√©")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du nettoyage: {e}")

if __name__ == "__main__":
    print("üöÄ D√âMARRAGE DU TEST DU SYST√àME √âCOLE")
    
    # Ex√©cuter les tests
    success = test_ecole_system()
    
    if success:
        print("\n‚úÖ Le syst√®me d'√©v√©nement '√âcole' fonctionne correctement !")
        
        # Demander si on veut nettoyer les donn√©es de test
        response = input("\nVoulez-vous nettoyer les donn√©es de test ? (y/N): ")
        if response.lower() in ['y', 'yes', 'oui']:
            cleanup_test_data()
    else:
        print("\n‚ùå Des erreurs ont √©t√© d√©tect√©es dans le syst√®me")
    
    print("\nüèÅ Test termin√©")
