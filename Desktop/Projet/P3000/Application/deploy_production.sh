#!/bin/bash

# Script de d√©ploiement robuste pour P3000 Production
# Usage: ./deploy_production.sh ou p3000-deploy
# Auteur: Assistant IA
# Version: 2.0

set -e  # Arr√™ter le script en cas d'erreur

# Configuration
PROJECT_DIR="/var/www/p3000/Desktop/Projet/P3000/Application"
VENV_PATH="/root/venv"
ENV_BACKUP_DIR="/root/p3000-env-backup"
PRODUCTION_ENV_FILE="$ENV_BACKUP_DIR/.env.production"
STATIC_BACKUP_DIR="/var/backups/p3000-static"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
BACKUP_NAME="backup_${TIMESTAMP}"

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction de logging
log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

# Fonction pour activer l'environnement virtuel
activate_venv() {
    if [ -z "$VIRTUAL_ENV" ]; then
        source "$VENV_PATH/bin/activate"
        log "üêç Environnement virtuel activ√©"
    fi
}

log_success() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] ‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] ‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ‚ùå $1${NC}"
}

# Fonction de v√©rification des pr√©requis
check_prerequisites() {
    log "üîç V√©rification des pr√©requis..."
    
    # V√©rifier que nous sommes sur le serveur de production
    if [ ! -d "$PROJECT_DIR" ]; then
        log_error "R√©pertoire du projet non trouv√©: $PROJECT_DIR"
        exit 1
    fi
    
    # V√©rifier l'environnement virtuel
    if [ ! -d "$VENV_PATH" ]; then
        log_error "Environnement virtuel non trouv√©: $VENV_PATH"
        exit 1
    fi
    
    # Cr√©er le r√©pertoire de sauvegarde des env s'il n'existe pas
    mkdir -p "$ENV_BACKUP_DIR"
    
    log_success "Pr√©requis v√©rifi√©s"
}

# Fonction de sauvegarde de l'environnement de production
backup_production_env() {
    log "üíæ Sauvegarde de l'environnement de production..."
    
    cd "$PROJECT_DIR"
    
    # Si c'est la premi√®re fois, cr√©er le fichier de production
    if [ ! -f "$PRODUCTION_ENV_FILE" ] && [ -f ".env" ]; then
        log "üìÑ Premi√®re sauvegarde - cr√©ation du fichier de production permanent"
        cp .env "$PRODUCTION_ENV_FILE"
        log_success "Fichier d'environnement de production cr√©√©: $PRODUCTION_ENV_FILE"
    elif [ -f ".env" ]; then
        # Sauvegarder la version actuelle avec timestamp
        cp .env "$ENV_BACKUP_DIR/.env.backup.$(date +%Y%m%d_%H%M%S)"
        log_success "Environnement sauvegard√© avec timestamp"
    fi
}

# Fonction de d√©ploiement du code
deploy_code() {
    log "üöÄ D√©ploiement du code depuis Git..."
    
    cd "$PROJECT_DIR"
    
    # Nettoyer les fichiers temporaires
    log "üßπ Nettoyage des fichiers temporaires..."
    find . -name "*.pyc" -delete 2>/dev/null || true
    find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
    
    # R√©cup√©rer les derni√®res modifications
    log "üì° R√©cup√©ration des derni√®res modifications..."
    git fetch origin
    
    # V√©rifier s'il y a des modifications locales non commit√©es
    if ! git diff-index --quiet HEAD --; then
        log_warning "Modifications locales d√©tect√©es, elles seront perdues"
    fi
    
    # Reset hard vers la derni√®re version de main
    log "üîÑ Synchronisation forc√©e avec origin/main..."
    git reset --hard origin/main
    
    # V√©rifier que nous sommes bien sur la derni√®re version
    LOCAL_COMMIT=$(git rev-parse HEAD)
    REMOTE_COMMIT=$(git rev-parse origin/main)
    
    if [ "$LOCAL_COMMIT" = "$REMOTE_COMMIT" ]; then
        log_success "Code synchronis√© avec la derni√®re version de main ($LOCAL_COMMIT)"
    else
        log_error "√âchec de la synchronisation avec origin/main"
        exit 1
    fi
}

# Fonction de restauration de l'environnement
restore_production_env() {
    log "üîß Restauration de l'environnement de production..."
    
    cd "$PROJECT_DIR"
    
    if [ -f "$PRODUCTION_ENV_FILE" ]; then
        cp "$PRODUCTION_ENV_FILE" .env
        log_success "Environnement de production restaur√©"
    else
        log_error "Fichier d'environnement de production non trouv√©: $PRODUCTION_ENV_FILE"
        log_error "Veuillez cr√©er manuellement le fichier .env avec les bonnes variables de production"
        exit 1
    fi
}

# Fonction de mise √† jour des d√©pendances
update_dependencies() {
    log "üì¶ Mise √† jour des d√©pendances Python..."
    
    cd "$PROJECT_DIR"
    activate_venv
    
    pip install --upgrade pip
    pip install -r requirements.txt
    
    log_success "D√©pendances Python mises √† jour"
}

# Fonction d'installation de Node.js
install_nodejs() {
    log "üì¶ V√©rification et installation de Node.js..."
    
    # V√©rifier si Node.js est install√©
    if ! command -v node &> /dev/null; then
        log "üîß Installation de Node.js 18.x..."
        
        # Installer Node.js 18.x (LTS)
        curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
        apt-get install -y nodejs
        
        log_success "Node.js install√© avec succ√®s"
    else
        log_success "Node.js d√©j√† install√©: $(node --version)"
    fi
    
    # V√©rifier npm
    if ! command -v npm &> /dev/null; then
        log_error "npm non trouv√© apr√®s installation de Node.js"
        exit 1
    else
        log_success "npm disponible: $(npm --version)"
    fi
}

# Fonction de build du frontend avec hachage
build_frontend() {
    log "üé® Build du frontend avec hachage..."
    
    cd "$PROJECT_DIR/frontend"
    
    # Installer les d√©pendances Node.js (y compris dev pour le build)
    log "üì¶ Installation des d√©pendances npm..."
    npm install
    
    # V√©rifier que webpack est configur√© pour le hachage
    if ! grep -q "contenthash" webpack.config.js; then
        log_warning "Webpack n'est pas configur√© pour le hachage - les fichiers ne seront pas hash√©s"
    fi
    
    # Build de production avec hachage
    log "üî® Build de production avec hachage..."
    npm run build
    
    # V√©rifier que les fichiers hash√©s ont √©t√© g√©n√©r√©s
    if [ ! -d "static/frontend" ] || [ -z "$(ls -A static/frontend/*.js 2>/dev/null)" ]; then
        log_error "Aucun fichier JS hash√© g√©n√©r√©"
        exit 1
    fi
    
    log_success "Fichiers React hash√©s g√©n√©r√©s:"
    ls -la static/frontend/*.js static/frontend/*.css 2>/dev/null || true
    
    cd "$PROJECT_DIR"
    log_success "Frontend build√© avec succ√®s et hachage"
}

# Fonction de gestion de Django avec hachage
manage_django() {
    log "üóÑÔ∏è Gestion Django avec hachage..."
    
    cd "$PROJECT_DIR"
    activate_venv
    
    # V√©rifier que ManifestStaticFilesStorage est configur√©
    if ! python -c "from django.conf import settings; print(settings.STATICFILES_STORAGE)" | grep -q "ManifestStaticFilesStorage"; then
        log_warning "ManifestStaticFilesStorage non configur√© - le hachage Django ne fonctionnera pas"
    fi
    
    # Collecter les fichiers statiques avec hachage
    log "üìÅ Collecte des fichiers statiques avec hachage..."
    python manage.py collectstatic --noinput
    
    # V√©rifier que le manifest.json a √©t√© g√©n√©r√©
    if [ ! -f "staticfiles/staticfiles.json" ]; then
        log_error "Manifest staticfiles.json non g√©n√©r√©"
        exit 1
    fi
    
    log_success "Manifest g√©n√©r√© avec $(python -c "import json; print(len(json.load(open('staticfiles/staticfiles.json'))))") fichiers"
    
    # V√©rifier que les fichiers r√©f√©renc√©s dans le template existent
    TEMPLATE_FILE="frontend/templates/frontend/index.html"
    if [ -f "$TEMPLATE_FILE" ]; then
        log "üîç V√©rification des fichiers r√©f√©renc√©s dans le template..."
        STATIC_FILES=$(grep -o "{% static '[^']*' %}" "$TEMPLATE_FILE" | sed "s/{% static '//g" | sed "s/' %}//g")
        
        for file in $STATIC_FILES; do
            if [ ! -f "staticfiles/$file" ]; then
                log_error "Fichier statique manquant: $file"
                exit 1
            fi
        done
        
        log_success "Tous les fichiers r√©f√©renc√©s dans le template existent"
    fi
    
    # Appliquer les migrations
    log "üóÑÔ∏è Application des migrations..."
    python manage.py migrate
    
    log_success "Gestion Django termin√©e avec hachage"
}

# Fonction de g√©n√©ration de version de d√©ploiement
generate_deploy_version() {
    log "üîÑ G√©n√©ration de la version de d√©ploiement..."
    
    # On est d√©j√† dans PROJECT_DIR depuis manage_django()
    # L'environnement virtuel est d√©j√† activ√©
    
    # Ex√©cuter le script de g√©n√©ration de version
    if [ -f "deploy_version.py" ]; then
        log "üìù Ex√©cution de deploy_version.py..."
        python deploy_version.py
        log_success "Version de d√©ploiement g√©n√©r√©e"
    else
        log_warning "Script deploy_version.py non trouv√© - version par d√©faut utilis√©e"
    fi
}

# Fonction de red√©marrage des services
restart_services() {
    log "üîÑ Red√©marrage des services..."
    
    # Arr√™ter Gunicorn
    log "üõë Arr√™t de Gunicorn..."
    systemctl stop gunicorn || log_warning "Gunicorn √©tait d√©j√† arr√™t√©"
    
    # Attendre un peu
    sleep 2
    
    # D√©marrer Gunicorn
    log "üöÄ D√©marrage de Gunicorn..."
    systemctl start gunicorn
    
    # V√©rifier le statut de Gunicorn
    if systemctl is-active --quiet gunicorn; then
        log_success "Gunicorn red√©marr√© avec succ√®s"
    else
        log_error "√âchec du red√©marrage de Gunicorn"
        systemctl status gunicorn --no-pager
        exit 1
    fi
    
    # Recharger Nginx (pas de restart complet n√©cessaire)
    log "üîÑ Rechargement de Nginx..."
    if systemctl reload nginx; then
        log_success "Nginx recharg√© avec succ√®s"
    else
        log_warning "√âchec du rechargement de Nginx"
        # Essayer un restart complet en cas d'√©chec
        log "üîÑ Tentative de restart complet de Nginx..."
        systemctl restart nginx
    fi
}

# Fonction de sauvegarde des fichiers statiques
backup_static_files() {
    log "üíæ Sauvegarde des fichiers statiques..."
    
    cd "$PROJECT_DIR"
    
    # Cr√©er le r√©pertoire de sauvegarde
    mkdir -p "$STATIC_BACKUP_DIR/$BACKUP_NAME"
    
    # Sauvegarder les fichiers statiques existants
    if [ -d "staticfiles" ]; then
        cp -r staticfiles "$STATIC_BACKUP_DIR/$BACKUP_NAME/"
        log_success "Fichiers statiques sauvegard√©s"
    fi
    
    # Sauvegarder les templates
    if [ -d "frontend/templates" ]; then
        cp -r frontend/templates "$STATIC_BACKUP_DIR/$BACKUP_NAME/"
        log_success "Templates sauvegard√©s"
    fi
    
    log_success "Sauvegarde cr√©√©e: $BACKUP_NAME"
}

# Fonction de rollback
rollback_deployment() {
    log_error "Erreur d√©tect√©e, d√©marrage du rollback..."
    
    if [ -d "$STATIC_BACKUP_DIR/$BACKUP_NAME" ]; then
        log "üîÑ Restauration de la sauvegarde $BACKUP_NAME"
        
        cd "$PROJECT_DIR"
        
        # Restaurer les fichiers statiques
        if [ -d "$STATIC_BACKUP_DIR/$BACKUP_NAME/staticfiles" ]; then
            rm -rf staticfiles
            cp -r "$STATIC_BACKUP_DIR/$BACKUP_NAME/staticfiles" .
            log_success "Fichiers statiques restaur√©s"
        fi
        
        # Restaurer les templates
        if [ -d "$STATIC_BACKUP_DIR/$BACKUP_NAME/templates" ]; then
            rm -rf frontend/templates
            cp -r "$STATIC_BACKUP_DIR/$BACKUP_NAME/templates" frontend/
            log_success "Templates restaur√©s"
        fi
        
        # Red√©marrer les services (restart complet pour le rollback)
        log "üîÑ Red√©marrage des services apr√®s rollback..."
        systemctl restart gunicorn
        systemctl restart nginx
        log_success "Services red√©marr√©s apr√®s rollback"
        
        log_warning "Rollback termin√©. V√©rifiez l'application."
    else
        log_error "Aucune sauvegarde trouv√©e pour le rollback"
    fi
    
    exit 1
}

# Fonction de v√©rification post-d√©ploiement
post_deployment_check() {
    log "üîç V√©rification post-d√©ploiement..."
    
    # V√©rifier les services
    if systemctl is-active --quiet gunicorn; then
        log_success "‚úÖ Gunicorn est actif"
    else
        log_error "‚ùå Gunicorn n'est pas actif"
    fi
    
    if systemctl is-active --quiet nginx; then
        log_success "‚úÖ Nginx est actif"
    else
        log_warning "‚ö†Ô∏è Nginx n'est pas actif"
    fi
    
    # Test de connectivit√©
    log "üåê Test de connectivit√©..."
    if curl -s -o /dev/null -w "%{http_code}" http://localhost:8000 | grep -q "200"; then
        log_success "Application accessible"
    else
        log_warning "Application non accessible, v√©rifiez les logs"
    fi
    
    # Test des fichiers statiques
    STATIC_TEST_FILE=$(find staticfiles -name "*.js" | head -1)
    if [ -n "$STATIC_TEST_FILE" ]; then
        STATIC_URL="/static/${STATIC_TEST_FILE#staticfiles/}"
        if curl -s -o /dev/null -w "%{http_code}" "http://localhost:8000$STATIC_URL" | grep -q "200"; then
            log_success "Fichiers statiques accessibles"
        else
            log_warning "Probl√®me d'acc√®s aux fichiers statiques"
        fi
    fi
    
    # Afficher les logs r√©cents en cas de probl√®me
    log "üìä Statut des services:"
    systemctl status gunicorn --no-pager -l
    
    log_success "üåê Application disponible sur: https://myp3000app.com"
}

# Fonction principale
main() {
    log "üöÄ D√©but du d√©ploiement P3000 Production v2.0 avec hachage"
    
    # Donner les permissions d'ex√©cution √† ce script
    chmod +x "$0"
    
    # √âtapes du d√©ploiement
    check_prerequisites
    backup_production_env
    backup_static_files
    deploy_code
    restore_production_env
    update_dependencies
    install_nodejs
    build_frontend
    manage_django
    generate_deploy_version
    restart_services
    post_deployment_check
    
    # Nettoyage des anciennes sauvegardes (garder les 5 derni√®res)
    log "üßπ Nettoyage des anciennes sauvegardes..."
    cd "$STATIC_BACKUP_DIR"
    ls -t | tail -n +6 | xargs -r rm -rf
    log_success "Anciennes sauvegardes nettoy√©es"
    
    # Validation post-d√©ploiement
    log "üîç Validation post-d√©ploiement..."
    if [ -f "validate_deployment.sh" ]; then
        chmod +x validate_deployment.sh
        if ./validate_deployment.sh; then
            log_success "Validation post-d√©ploiement r√©ussie"
        else
            log_warning "Validation post-d√©ploiement √©chou√©e - v√©rifiez manuellement"
        fi
    else
        log_warning "Script de validation non trouv√© - validation manuelle recommand√©e"
    fi
    
    log_success "‚úÖ D√©ploiement termin√© avec succ√®s!"
    log "üìù Logs disponibles dans les journaux syst√®me (journalctl -u gunicorn)"
    log "üíæ Sauvegarde cr√©√©e: $BACKUP_NAME"
    log "üîç Validation: ./validate_deployment.sh"
}

# Gestion des erreurs avec rollback
trap 'rollback_deployment' ERR

# Ex√©cution du script principal
main "$@"
