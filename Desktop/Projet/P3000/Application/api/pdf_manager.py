"""
Module de gestion des PDFs pour le Drive AWS S3
G√®re la g√©n√©ration, le stockage et l'organisation des PDFs
"""

import os
import subprocess
import tempfile
from datetime import datetime
from typing import Dict, Optional, Tuple
from django.conf import settings
from django.http import JsonResponse
from .utils import (
    get_s3_client, 
    get_s3_bucket_name, 
    upload_file_to_s3,
    create_s3_folder_recursive,
    custom_slugify
)
from .drive_automation import drive_automation


class PDFManager:
    """
    Gestionnaire de PDFs pour le Drive AWS S3
    """
    
    def __init__(self):
        # Corriger le chemin de base pour pointer vers le r√©pertoire racine de l'application
        self.base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        self.node_scripts_dir = os.path.join(self.base_dir, 'frontend', 'src', 'components')
        self.temp_dir = tempfile.gettempdir()
        
        # Mapping des types de documents vers les dossiers S3
        self.document_type_folders = {
            'planning_hebdo': 'PlanningHebdo',
            'planning_mensuel': 'PlanningHebdo',
            'rapport_agents': 'Rapport_mensuel',
            'devis_travaux': 'Devis',
            'devis_marche': 'Devis_Marche',
            'situation': 'Situation',
            'bon_commande': 'Bon_Commande',
            'facture': 'Facture',
            'avenant': 'Avenant',
            'rapport_chantier': 'Documents_Execution',
            'contrat_sous_traitance': 'Contrats',
            'avenant_sous_traitance': 'Avenants'
        }
    
    def generate_pdf_filename(self, document_type: str, **kwargs) -> str:
        """
        G√©n√®re un nom de fichier automatique pour le PDF
        
        Args:
            document_type: Type de document (planning_hebdo, rapport_agents, etc.)
            **kwargs: Param√®tres sp√©cifiques (week, year, month, chantier_name, etc.)
        
        Returns:
            str: Nom de fichier g√©n√©r√©
        """
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        if document_type == 'planning_hebdo':
            week = kwargs.get('week', 'XX')
            year = kwargs.get('year', 'XXXX')
            # Nouveau format : PH S{week} {year}
            year_short = str(year)[-2:] if len(str(year)) >= 2 else str(year)
            filename = f"PH S{week} {year_short}.pdf"
            return filename
        
        elif document_type == 'planning_mensuel':
            month = kwargs.get('month', 'XX')
            year = kwargs.get('year', 'XXXX')
            # Nouveau format : PH {mois} {ann√©e}
            mois_francais = {
                1: 'Janvier', 2: 'F√©vrier', 3: 'Mars', 4: 'Avril',
                5: 'Mai', 6: 'Juin', 7: 'Juillet', 8: 'Ao√ªt',
                9: 'Septembre', 10: 'Octobre', 11: 'Novembre', 12: 'D√©cembre'
            }
            month_name = mois_francais.get(month, f'Mois_{month}')
            year_short = str(year)[-2:] if len(str(year)) >= 2 else str(year)
            return f"PH {month_name} {year_short}.pdf"
        
        elif document_type == 'rapport_agents':
            month = kwargs.get('month', 'XX')
            year = kwargs.get('year', 'XXXX')
            # Format coh√©rent avec le frontend : RapportComptable_{mois}_{ann√©e}
            mois_francais = {
                1: 'Janvier', 2: 'F√©vrier', 3: 'Mars', 4: 'Avril',
                5: 'Mai', 6: 'Juin', 7: 'Juillet', 8: 'Ao√ªt',
                9: 'Septembre', 10: 'Octobre', 11: 'Novembre', 12: 'D√©cembre'
            }
            month_name = mois_francais.get(month, f'Mois_{month}')
            year_short = str(year)[-2:] if len(str(year)) >= 2 else str(year)
            return f"RapportComptable_{month_name}_{year_short}.pdf"
        
        elif document_type == 'devis_travaux':
            # Utiliser le num√©ro du devis depuis la DB (sans timestamp ni ID)
            devis_numero = kwargs.get('devis_numero', 'devis_travaux')
            print(f"üîç DEBUG generate_pdf_filename - devis_numero re√ßu: '{devis_numero}'")
            return f"{devis_numero}.pdf"
        
        elif document_type == 'devis_marche':
            # Utiliser le nom du devis depuis la DB (sans timestamp ni ID)
            devis_name = kwargs.get('devis_name', kwargs.get('appel_offres_name', 'devis_marche'))
            print(f"üîç DEBUG generate_pdf_filename - devis_name re√ßu: '{devis_name}'")
            print(f"üîç DEBUG generate_pdf_filename - kwargs: {kwargs}")
            # Nettoyer le nom pour qu'il soit propre
            clean_name = custom_slugify(devis_name)
            print(f"üîç DEBUG generate_pdf_filename - clean_name apr√®s custom_slugify: '{clean_name}'")
            return f"{clean_name}.pdf"
        
        elif document_type == 'contrat_sous_traitance':
            # Utiliser le nom du contrat depuis les param√®tres
            contrat_name = kwargs.get('contrat_name', 'contrat_sous_traitance')
            print(f"üîç DEBUG generate_pdf_filename - contrat_name re√ßu: '{contrat_name}'")
            return f"{contrat_name}.pdf"
        
        elif document_type == 'avenant_sous_traitance':
            # Utiliser le nom de l'avenant depuis les param√®tres
            avenant_name = kwargs.get('avenant_name', 'avenant_sous_traitance')
            print(f"üîç DEBUG generate_pdf_filename - avenant_name re√ßu: '{avenant_name}'")
            return f"{avenant_name}.pdf"
        
        elif document_type == 'situation':
            # Utiliser le numero_situation depuis la DB (sans timestamp ni ID)
            numero_situation = kwargs.get('numero_situation', 'situation')
            print(f"üîç DEBUG generate_pdf_filename - numero_situation re√ßu: '{numero_situation}'")
            return f"{numero_situation}.pdf"
        
        elif document_type == 'bon_commande':
            # Utiliser le numero_bon_commande depuis la DB (sans timestamp ni ID)
            numero_bon_commande = kwargs.get('numero_bon_commande', 'bon_commande')
            print(f"üîç DEBUG generate_pdf_filename - numero_bon_commande re√ßu: '{numero_bon_commande}'")
            return f"{numero_bon_commande}.pdf"
        
        elif document_type == 'facture':
            # Utiliser le num√©ro de la facture depuis la DB (sans timestamp ni ID)
            numero = kwargs.get('numero', 'FACT-001')
            print(f"üîç DEBUG generate_pdf_filename - numero facture re√ßu: '{numero}'")
            return f"{numero}.pdf"
        
        else:
            # Nom g√©n√©rique
            return f"{document_type}_{timestamp}.pdf"
    
    def get_s3_folder_path(self, document_type: str, societe_name: str, **kwargs) -> str:
        """
        D√©termine le chemin S3 o√π stocker le PDF
        
        Args:
            document_type: Type de document
            societe_name: Nom de la soci√©t√©
            **kwargs: Param√®tres suppl√©mentaires (chantier_name, appel_offres_name, etc.)
        
        Returns:
            str: Chemin S3 complet
        """
        societe_slug = custom_slugify(societe_name)
        
        # D√©terminer le dossier racine et le sous-dossier
        if document_type in ['devis_travaux', 'devis_marche']:
            # Pour les devis, v√©rifier s'il s'agit d'un chantier ou d'un appel d'offres
            if 'chantier_name' in kwargs:
                # C'est un chantier (devis normal)
                chantier_name = kwargs['chantier_name']
                chantier_slug = custom_slugify(chantier_name)
                subfolder = self.document_type_folders.get(document_type, 'Devis')
                return f"Chantiers/{societe_slug}/{chantier_slug}/{subfolder}"
            else:
                # C'est un appel d'offres
                appel_offres_name = kwargs['appel_offres_name']
                appel_offres_id = kwargs['appel_offres_id']
                # Utiliser seulement le nom de l'appel d'offres (sans ID devant)
                appel_offres_slug = custom_slugify(appel_offres_name)
                
                # Pour les devis de march√©, utiliser la structure Devis/Devis_Marche
                if document_type == 'devis_marche':
                    subfolder = 'Devis/Devis_Marche'
                else:
                    subfolder = self.document_type_folders.get(document_type, 'Devis')
                
                return f"Appels_Offres/{societe_slug}/{appel_offres_slug}/{subfolder}"
        
        elif document_type in ['contrat_sous_traitance', 'avenant_sous_traitance']:
            # Pour les contrats et avenants de sous-traitance
            chantier_name = kwargs.get('chantier_name', 'Chantier')
            chantier_slug = custom_slugify(chantier_name)
            sous_traitant_name = kwargs.get('sous_traitant_name', 'Sous_Traitant')
            sous_traitant_slug = custom_slugify(sous_traitant_name)
            return f"Chantiers/{societe_slug}/{chantier_slug}/Sous_Traitant/{sous_traitant_slug}"
        
        elif document_type in ['planning_hebdo', 'planning_mensuel', 'rapport_agents']:
            # Ces documents sont maintenant stock√©s dans Agents/Document_Generaux/
            # Pour le planning hebdo, ajouter l'ann√©e comme sous-dossier
            if document_type == 'planning_hebdo':
                year = kwargs.get('year', 'XXXX')
                return f"Agents/Document_Generaux/PlanningHebdo/{year}"
            elif document_type == 'rapport_agents':
                # Pour le rapport agents, ajouter l'ann√©e comme sous-dossier
                year = kwargs.get('year', 'XXXX')
                return f"Agents/Document_Generaux/{self.document_type_folders.get(document_type, 'Documents')}/{year}"
            else:
                # Planning mensuel
                return f"Agents/Document_Generaux/{self.document_type_folders.get(document_type, 'Documents')}"
        
        elif document_type == 'situation':
            # Pour les situations, utiliser la structure Chantiers/
            chantier_name = kwargs.get('chantier_name', 'Chantier')
            chantier_slug = custom_slugify(chantier_name)
            subfolder = self.document_type_folders.get(document_type, 'Situation')
            return f"Chantiers/{societe_slug}/{chantier_slug}/{subfolder}"
        
        elif document_type == 'bon_commande':
            # Pour les bons de commande, utiliser la structure Chantiers/ avec sous-dossier par fournisseur
            chantier_name = kwargs.get('chantier_name', 'Chantier')
            chantier_slug = custom_slugify(chantier_name)
            fournisseur_name = kwargs.get('fournisseur_name', 'Fournisseur')
            fournisseur_slug = custom_slugify(fournisseur_name)
            subfolder = self.document_type_folders.get(document_type, 'Bon_Commande')
            return f"Chantiers/{societe_slug}/{chantier_slug}/{subfolder}/{fournisseur_slug}"
        
        elif document_type == 'facture':
            # Pour les factures, utiliser la structure Chantiers/
            chantier_name = kwargs.get('chantier_name', 'Chantier')
            chantier_slug = custom_slugify(chantier_name)
            subfolder = self.document_type_folders.get(document_type, 'Facture')
            return f"Chantiers/{societe_slug}/{chantier_slug}/{subfolder}"
        
        elif document_type == 'avenant':
            # Ces documents sont toujours li√©s √† un chantier
            chantier_name = kwargs['chantier_name']
            chantier_slug = custom_slugify(chantier_name)
            subfolder = self.document_type_folders.get(document_type, 'Documents_Execution')
            return f"Soci√©t√©s/{societe_slug}/{chantier_slug}/{subfolder}"
        
        else:
            # Type de document non reconnu, stocker dans un dossier g√©n√©ral
            return f"Documents_Generaux/{societe_slug}/Autres"
    
    def check_dependencies(self) -> Tuple[bool, str]:
        """
        V√©rifie que toutes les d√©pendances sont install√©es
        
        Returns:
            Tuple[bool, str]: (succ√®s, message d'erreur)
        """
        # V√©rifier Node.js
        try:
            subprocess.run(['node', '--version'], check=True, capture_output=True)
        except (subprocess.CalledProcessError, FileNotFoundError):
            return False, "Node.js n'est pas install√© ou n'est pas accessible"
        
        # V√©rifier Puppeteer
        puppeteer_path = os.path.join(self.base_dir, 'frontend', 'node_modules', 'puppeteer')
        if not os.path.exists(puppeteer_path):
            return False, "Puppeteer n'est pas install√©. Veuillez ex√©cuter: cd frontend && npm install puppeteer"
        
        # V√©rifier les scripts Node.js
        required_scripts = ['generate_pdf.js', 'generate_monthly_agents_pdf.js']
        for script in required_scripts:
            script_path = os.path.join(self.node_scripts_dir, script)
            if not os.path.exists(script_path):
                return False, f"Script Node.js introuvable: {script}"
        
        return True, ""
    
    def generate_andStore_pdf(self, 
                             document_type: str, 
                             preview_url: str, 
                             societe_name: str,
                             force_replace: bool = False,
                             **kwargs) -> Tuple[bool, str, str, bool]:
        """
        G√©n√®re un PDF et le stocke dans AWS S3 avec gestion des conflits
        
        Args:
            document_type: Type de document
            preview_url: URL de pr√©visualisation HTML
            societe_name: Nom de la soci√©t√©
            force_replace: Force le remplacement d'un fichier existant
            **kwargs: Param√®tres sp√©cifiques au type de document
        
        Returns:
            Tuple[bool, str, str, bool]: (succ√®s, message, chemin_s3, conflit_d√©tect√©)
        """
        try:
            # 1. V√©rifier les d√©pendances
            deps_ok, error_msg = self.check_dependencies()
            if not deps_ok:
                return False, error_msg, "", False
            
            # 2. D√©terminer le script Node.js √† utiliser
            if document_type in ['planning_hebdo', 'planning_mensuel']:
                script_name = 'generate_pdf.js'
                output_filename = 'planning_temp.pdf'
            elif document_type == 'rapport_agents':
                script_name = 'generate_monthly_agents_pdf.js'
                output_filename = 'rapport_agents_temp.pdf'
            else:
                # Utiliser le script par d√©faut
                script_name = 'generate_pdf.js'
                output_filename = f"{document_type}_temp.pdf"
            
            script_path = os.path.join(self.node_scripts_dir, script_name)
            temp_pdf_path = os.path.join(self.temp_dir, output_filename)
            
            # 3. G√©n√©rer le PDF avec Puppeteer
            print(f"üéØ G√©n√©ration du PDF {document_type} avec Puppeteer...")
            command = ['node', script_path, preview_url, temp_pdf_path]
            
            result = subprocess.run(
                command, 
                check=True, 
                capture_output=True, 
                text=True, 
                timeout=60
            )
            
            if not os.path.exists(temp_pdf_path):
                return False, "Le fichier PDF n'a pas √©t√© g√©n√©r√© par Puppeteer", "", False
            
            print(f"‚úÖ PDF g√©n√©r√© avec succ√®s: {temp_pdf_path}")
            
            # 4. D√©terminer le nom et l'emplacement S3
            filename = self.generate_pdf_filename(document_type, **kwargs)
            s3_folder_path = self.get_s3_folder_path(document_type, societe_name, **kwargs)
            
            # 5. Cr√©er le dossier S3 s'il n'existe pas
            create_s3_folder_recursive(s3_folder_path)
            
            # 6. V√©rifier s'il y a un conflit de nom
            s3_file_path = f"{s3_folder_path}/{filename}"
            conflict_detected = self.check_file_conflict(s3_file_path)
            
            if conflict_detected:
                print(f"‚ö†Ô∏è Conflit d√©tect√©: {s3_file_path}")
                
                if force_replace:
                    print(f"üîÑ Remplacement forc√© activ√© - d√©placement de l'ancien fichier vers l'historique")
                    # D√©placer l'ancien fichier vers l'historique au lieu de le supprimer
                    try:
                        # Cr√©er le dossier Historique √† la racine du Drive
                        historique_path = "Historique"
                        create_s3_folder_recursive(historique_path)
                        
                        # D√©placer l'ancien fichier vers l'historique avec timestamp
                        old_timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                        old_filename = f"Ancien_{filename.replace('.pdf', '')}_{old_timestamp}.pdf"
                        old_s3_path = f"{historique_path}/{old_filename}"
                        
                        print(f"üì¶ D√©placement de l'ancien fichier vers l'historique: {old_s3_path}")
                        self.move_file_in_s3(s3_file_path, old_s3_path)
                        print(f"üóëÔ∏è Ancien fichier d√©plac√© vers l'historique: {old_s3_path}")
                        conflict_detected = False  # Plus de conflit apr√®s d√©placement
                    except Exception as e:
                        print(f"‚ùå Erreur lors du d√©placement de l'ancien fichier vers l'historique: {str(e)}")
                        return False, f"Erreur lors du d√©placement de l'ancien fichier vers l'historique: {str(e)}", "", False
                else:
                # Retourner imm√©diatement avec l'information de conflit
                # L'utilisateur devra confirmer avant de continuer
                    return False, "Conflit de fichier d√©tect√© - confirmation requise", s3_file_path, True
            
            # 7. Uploader le nouveau PDF dans S3 (seulement si pas de conflit)
            print(f"üöÄ Upload du nouveau PDF vers S3: {s3_file_path}")
            success = upload_file_to_s3(temp_pdf_path, s3_file_path)
            if not success:
                return False, "√âchec de l'upload du PDF vers AWS S3", "", False
            
            # 8. Nettoyer le fichier temporaire
            try:
                os.remove(temp_pdf_path)
                print(f"üßπ Fichier temporaire supprim√©: {temp_pdf_path}")
            except:
                pass
            
            print(f"üéâ PDF stock√© avec succ√®s dans S3: {s3_file_path}")
            return True, "PDF g√©n√©r√© et stock√© avec succ√®s", s3_file_path, conflict_detected
            
        except subprocess.TimeoutExpired:
            return False, "Timeout lors de la g√©n√©ration du PDF (60 secondes)", "", False
        except subprocess.CalledProcessError as e:
            return False, f"Erreur lors de la g√©n√©ration du PDF: {str(e)}", "", False
        except Exception as e:
            return False, f"Erreur inattendue: {str(e)}", "", False

    def download_pdf_from_s3(self, s3_path: str) -> Tuple[bool, str, bytes]:
        """
        T√©l√©charge un PDF depuis AWS S3
        
        Args:
            s3_path: Chemin S3 du fichier
            
        Returns:
            Tuple[bool, str, bytes]: (succ√®s, message, contenu_du_pdf)
        """
        try:
            # Assuming is_s3_available() is defined elsewhere or will be added.
            # For now, we'll assume it's available for demonstration purposes.
            # In a real scenario, you'd check if S3 is configured and accessible.
            # For this example, we'll just proceed if it's not explicitly unavailable.
            # If S3 is not configured, this will raise an error.
            # If S3 is configured, we proceed with the download.
            
            s3_client = get_s3_client()
            bucket_name = get_s3_bucket_name()
            
            print(f"üì• T√©l√©chargement depuis S3: {s3_path}")
            
            # T√©l√©charger le fichier depuis S3
            response = s3_client.get_object(Bucket=bucket_name, Key=s3_path)
            pdf_content = response['Body'].read()
            
            print(f"‚úÖ PDF t√©l√©charg√© avec succ√®s: {len(pdf_content)} octets")
            return True, "PDF t√©l√©charg√© avec succ√®s", pdf_content
            
        except Exception as e:
            error_msg = f"Erreur lors du t√©l√©chargement depuis S3: {str(e)}"
            print(f"‚ùå {error_msg}")
            return False, error_msg, b""

    def get_file_from_s3(self, file_path: str) -> Tuple[bool, bytes, str, str]:
        """
        T√©l√©charge n'importe quel fichier depuis AWS S3
        
        Args:
            file_path: Chemin S3 du fichier
            
        Returns:
            Tuple[bool, bytes, str, str]: (succ√®s, contenu_du_fichier, type_mime, nom_fichier)
        """
        try:
            s3_client = get_s3_client()
            bucket_name = get_s3_bucket_name()
            
            print(f"üì• T√©l√©chargement du fichier depuis S3: {file_path}")
            
            # T√©l√©charger le fichier depuis S3
            response = s3_client.get_object(Bucket=bucket_name, Key=file_path)
            file_content = response['Body'].read()
            
            # D√©terminer le type MIME bas√© sur l'extension
            file_extension = file_path.split('.')[-1].lower() if '.' in file_path else ''
            content_type = self.get_mime_type(file_extension)
            
            # Extraire le nom du fichier
            file_name = file_path.split('/')[-1]
            
            print(f"‚úÖ Fichier t√©l√©charg√© avec succ√®s: {file_name} ({len(file_content)} octets, {content_type})")
            return True, file_content, content_type, file_name
            
        except Exception as e:
            error_msg = f"Erreur lors du t√©l√©chargement depuis S3: {str(e)}"
            print(f"‚ùå {error_msg}")
            return False, b"", "application/octet-stream", ""

    def get_mime_type(self, extension: str) -> str:
        """
        D√©termine le type MIME bas√© sur l'extension du fichier
        
        Args:
            extension: Extension du fichier (sans le point)
            
        Returns:
            str: Type MIME correspondant
        """
        mime_types = {
            'pdf': 'application/pdf',
            'txt': 'text/plain',
            'html': 'text/html',
            'htm': 'text/html',
            'css': 'text/css',
            'js': 'application/javascript',
            'json': 'application/json',
            'xml': 'application/xml',
            'jpg': 'image/jpeg',
            'jpeg': 'image/jpeg',
            'png': 'image/png',
            'gif': 'image/gif',
            'bmp': 'image/bmp',
            'svg': 'image/svg+xml',
            'webp': 'image/webp',
            'mp4': 'video/mp4',
            'webm': 'video/webm',
            'ogg': 'video/ogg',
            'mp3': 'audio/mpeg',
            'wav': 'audio/wav',
            'flac': 'audio/flac',
            'doc': 'application/msword',
            'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            'xls': 'application/vnd.ms-excel',
            'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            'ppt': 'application/vnd.ms-powerpoint',
            'pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
            'zip': 'application/zip',
            'rar': 'application/x-rar-compressed',
            '7z': 'application/x-7z-compressed',
            'tar': 'application/x-tar',
            'gz': 'application/gzip'
        }
        
        return mime_types.get(extension, 'application/octet-stream')

    def check_file_conflict(self, s3_file_path: str) -> bool:
        """
        V√©rifie s'il y a un conflit de nom de fichier dans S3
        
        Args:
            s3_file_path: Chemin S3 du fichier
            
        Returns:
            bool: True si un conflit est d√©tect√©, False sinon
        """
        try:
            s3_client = get_s3_client()
            bucket_name = get_s3_bucket_name()
            
            # V√©rifier si le fichier existe d√©j√†
            try:
                s3_client.head_object(Bucket=bucket_name, Key=s3_file_path)
                return True  # Le fichier existe d√©j√†
            except s3_client.exceptions.NoSuchKey:
                return False  # Pas de conflit
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la v√©rification du conflit: {str(e)}")
            return False

    def move_file_in_s3(self, old_path: str, new_path: str) -> bool:
        """
        D√©place un fichier dans S3 (copie + suppression)
        
        Args:
            old_path: Ancien chemin S3
            new_path: Nouveau chemin S3
            
        Returns:
            bool: True si le d√©placement a r√©ussi, False sinon
        """
        try:
            s3_client = get_s3_client()
            bucket_name = get_s3_bucket_name()
            
            # Copier le fichier vers le nouveau chemin
            copy_source = {'Bucket': bucket_name, 'Key': old_path}
            s3_client.copy_object(CopySource=copy_source, Bucket=bucket_name, Key=new_path)
            
            # Supprimer l'ancien fichier
            s3_client.delete_object(Bucket=bucket_name, Key=old_path)
            
            print(f"‚úÖ Fichier d√©plac√© avec succ√®s: {old_path} ‚Üí {new_path}")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur lors du d√©placement du fichier: {str(e)}")
            return False

    def replace_file_with_confirmation(self, document_type: str, preview_url: str, societe_name: str, **kwargs) -> Tuple[bool, str, str]:
        """
        Remplace un fichier existant apr√®s confirmation de l'utilisateur
        
        Args:
            document_type: Type de document
            preview_url: URL de pr√©visualisation HTML
            societe_name: Nom de la soci√©t√©
            **kwargs: Param√®tres sp√©cifiques au type de document
        
        Returns:
            Tuple[bool, str, str]: (succ√®s, message, chemin_s3)
        """
        try:
            # 1. V√©rifier les d√©pendances
            deps_ok, error_msg = self.check_dependencies()
            if not deps_ok:
                return False, error_msg, "", False
            
            # 2. D√©terminer le script Node.js √† utiliser
            if document_type in ['planning_hebdo', 'planning_mensuel']:
                script_name = 'generate_pdf.js'
                output_filename = 'planning_temp.pdf'
            elif document_type == 'rapport_agents':
                script_name = 'generate_monthly_agents_pdf.js'
                output_filename = 'rapport_agents_temp.pdf'
            else:
                # Utiliser le script par d√©faut
                script_name = 'generate_pdf.js'
                output_filename = f"{document_type}_temp.pdf"
            
            script_path = os.path.join(self.node_scripts_dir, script_name)
            temp_pdf_path = os.path.join(self.temp_dir, output_filename)
            
            # 3. G√©n√©rer le PDF avec Puppeteer
            print(f"üéØ G√©n√©ration du PDF {document_type} avec Puppeteer...")
            command = ['node', script_path, preview_url, temp_pdf_path]
            
            result = subprocess.run(
                command, 
                check=True, 
                capture_output=True, 
                text=True, 
                timeout=60
            )
            
            if not os.path.exists(temp_pdf_path):
                return False, "Le fichier PDF n'a pas √©t√© g√©n√©r√© par Puppeteer", "", False
            
            print(f"‚úÖ PDF g√©n√©r√© avec succ√®s: {temp_pdf_path}")
            
            # 4. D√©terminer le nom et l'emplacement S3
            filename = self.generate_pdf_filename(document_type, **kwargs)
            s3_folder_path = self.get_s3_folder_path(document_type, societe_name, **kwargs)
            
            # 5. Cr√©er le dossier S3 s'il n'existe pas
            print(f"üìÅ Cr√©ation du dossier S3: {s3_folder_path}")
            create_s3_folder_recursive(s3_folder_path)
            
            # 6. V√©rifier le conflit et g√©rer le remplacement
            s3_file_path = f"{s3_folder_path}/{filename}"
            
            if self.check_file_conflict(s3_file_path):
                print(f"‚ö†Ô∏è Remplacement du fichier existant: {s3_file_path}")
                
                # Cr√©er le dossier Historique √† la racine du Drive
                historique_path = "Historique"
                create_s3_folder_recursive(historique_path)
                
                # D√©placer l'ancien fichier vers l'historique avec timestamp
                old_timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                old_filename = f"Ancien_{filename.replace('.pdf', '')}_{old_timestamp}.pdf"
                old_s3_path = f"{historique_path}/{old_filename}"
                
                print(f"üì¶ D√©placement de l'ancien fichier vers l'historique: {old_s3_path}")
                self.move_file_in_s3(s3_file_path, old_s3_path)
            
            # 7. Uploader le nouveau PDF dans S3
            print(f"üöÄ Upload du nouveau PDF vers S3: {s3_file_path}")
            success = upload_file_to_s3(temp_pdf_path, s3_file_path)
            if not success:
                return False, "√âchec de l'upload du PDF vers AWS S3", ""
            
            # 8. Nettoyer le fichier temporaire
            try:
                os.remove(temp_pdf_path)
                print(f"üßπ Fichier temporaire supprim√©: {temp_pdf_path}")
            except:
                pass
            
            print(f"üéâ PDF remplac√© avec succ√®s dans S3: {s3_file_path}")
            return True, "PDF g√©n√©r√© et remplac√© avec succ√®s", s3_file_path
            
        except subprocess.TimeoutExpired:
            return False, "Timeout lors de la g√©n√©ration du PDF (60 secondes)", ""
        except subprocess.CalledProcessError as e:
            return False, f"Erreur lors de la g√©n√©ration du PDF: {str(e)}", ""
        except Exception as e:
            return False, f"Erreur inattendue: {str(e)}", ""

    def cleanup_old_historique_files(self, days_old: int = 30) -> bool:
        """
        Nettoie les anciens fichiers d'historique (suppression automatique)
        
        Args:
            days_old: Nombre de jours apr√®s lequel supprimer (d√©faut: 30)
            
        Returns:
            bool: True si le nettoyage a r√©ussi, False sinon
        """
        try:
            s3_client = get_s3_client()
            bucket_name = get_s3_bucket_name()
            
            from datetime import datetime, timedelta
            cutoff_date = datetime.now() - timedelta(days=days_old)
            
            # Lister tous les fichiers dans les dossiers Historique
            paginator = s3_client.get_paginator('list_objects_v2')
            
            deleted_count = 0
            for page in paginator.paginate(Bucket=bucket_name, Prefix=''):
                if 'Contents' in page:
                    for obj in page['Contents']:
                        key = obj['Key']
                        
                        # V√©rifier si c'est un fichier d'historique
                        if '/Historique/' in key and key.endswith('.pdf'):
                            # Extraire la date du nom de fichier
                            try:
                                # Format: Ancien_nom_YYYYMMDD_HHMMSS.pdf
                                filename = key.split('/')[-1]
                                if filename.startswith('Ancien_') and '_' in filename:
                                    date_part = filename.split('_')[-2]  # YYYYMMDD
                                    file_date = datetime.strptime(date_part, '%Y%m%d')
                                    
                                    if file_date < cutoff_date:
                                        # Supprimer le fichier ancien
                                        s3_client.delete_object(Bucket=bucket_name, Key=key)
                                        deleted_count += 1
                                        print(f"üóëÔ∏è Fichier historique supprim√©: {key}")
                            except:
                                # Si on ne peut pas parser la date, ignorer
                                continue
            
            print(f"üßπ Nettoyage termin√©: {deleted_count} fichiers supprim√©s")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur lors du nettoyage: {str(e)}")
            return False

    def list_files_in_s3_folder(self, folder_path: str) -> list:
        """
        Liste les fichiers dans un dossier S3
        
        Args:
            folder_path: Chemin du dossier S3
        
        Returns:
            list: Liste des noms de fichiers (sans le chemin)
        """
        try:
            s3_client = get_s3_client()
            bucket_name = get_s3_bucket_name()
            
            # S'assurer que le chemin se termine par /
            if not folder_path.endswith('/'):
                folder_path += '/'
            
            # Lister les objets dans le dossier
            response = s3_client.list_objects_v2(
                Bucket=bucket_name,
                Prefix=folder_path,
                Delimiter='/'
            )
            
            files = []
            if 'Contents' in response:
                for obj in response['Contents']:
                    key = obj['Key']
                    # Extraire seulement le nom du fichier (sans le chemin)
                    if key != folder_path and key.endswith('.pdf'):
                        file_name = key.split('/')[-1]
                        files.append(file_name)
            
            # Trier par date de modification (plus r√©cent en premier)
            files.sort(reverse=True)
            return files
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la liste des fichiers dans {folder_path}: {str(e)}")
            return []


# Instance globale
pdf_manager = PDFManager()
