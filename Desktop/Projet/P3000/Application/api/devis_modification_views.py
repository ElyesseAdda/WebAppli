"""
Vues sp√©cialis√©es pour la modification et r√©g√©n√©ration de devis
"""
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import AllowAny
from rest_framework.response import Response
from rest_framework import status
from django.http import JsonResponse
from .models import Devis, Chantier, Societe, AppelOffres
from .pdf_manager import PDFManager
from .utils import custom_slugify
import logging

logger = logging.getLogger(__name__)

@api_view(['POST'])
@permission_classes([AllowAny])
def regenerate_devis_pdf(request, devis_id):
    """
    R√©g√©n√®re le PDF d'un devis existant et le remplace dans le Drive
    """
    try:
        logger.info(f"üîÑ D√©but de la r√©g√©n√©ration du PDF pour le devis {devis_id}")
        
        # R√©cup√©rer le devis existant
        try:
            devis = Devis.objects.get(id=devis_id)
            logger.info(f"‚úÖ Devis trouv√©: {devis.numero}, devis_chantier: {devis.devis_chantier}")
        except Devis.DoesNotExist:
            logger.error(f"‚ùå Devis {devis_id} non trouv√©")
            return Response({
                'error': 'Devis non trouv√©'
            }, status=status.HTTP_404_NOT_FOUND)
        
        # R√©cup√©rer les donn√©es associ√©es
        # Pour les devis, la soci√©t√© est g√©n√©ralement associ√©e au chantier
        societe_name = "Soci√©t√© par d√©faut"
        logger.info(f"üìä Soci√©t√© initiale: {societe_name}")
        
        # D√©terminer le type de devis et pr√©parer les donn√©es
        if devis.devis_chantier:
            logger.info("üìã Type: Devis de chantier")
            # Devis de chantier - r√©cup√©rer les donn√©es du chantier
            try:
                # V√©rifier si devis.chantier est d√©j√† un objet ou un ID
                if hasattr(devis.chantier, 'id'):
                    # C'est d√©j√† un objet Chantier
                    chantier = devis.chantier
                    chantier_name = chantier.chantier_name
                    chantier_id = chantier.id
                else:
                    # C'est un ID, faire la requ√™te
                    chantier = Chantier.objects.get(id=devis.chantier)
                    chantier_name = chantier.chantier_name
                    chantier_id = chantier.id
                logger.info(f"‚úÖ Chantier trouv√©: {chantier_name} (ID: {chantier_id})")
                
                # R√©cup√©rer la soci√©t√© du chantier
                if hasattr(chantier, 'societe') and chantier.societe:
                    societe_name = chantier.societe.name
                    logger.info(f"üìä Soci√©t√© du chantier: {societe_name}")
                else:
                    logger.warning("‚ö†Ô∏è Aucune soci√©t√© trouv√©e pour le chantier, utilisation de la soci√©t√© par d√©faut")
                    
            except Chantier.DoesNotExist:
                logger.error(f"‚ùå Chantier {devis.chantier} non trouv√© pour le devis de chantier")
                return Response({
                    'error': 'Chantier non trouv√© pour ce devis de chantier'
                }, status=status.HTTP_404_NOT_FOUND)
            
            # Donn√©es pour devis de chantier
            # Pour les devis de chantier, nous devons passer les donn√©es de l'appel d'offres
            # R√©cup√©rer l'appel d'offres du devis
            try:
                appel_offres = AppelOffres.objects.get(id=devis.appel_offres)
                appel_offres_name = appel_offres.name
                appel_offres_id = appel_offres.id
                logger.info(f"‚úÖ Appel d'offres trouv√©: {appel_offres_name} (ID: {appel_offres_id})")
            except AppelOffres.DoesNotExist:
                logger.error(f"‚ùå Appel d'offres {devis.appel_offres} non trouv√© pour le devis de chantier")
                return Response({
                    'error': 'Appel d\'offres non trouv√© pour ce devis de chantier'
                }, status=status.HTTP_404_NOT_FOUND)
            
            document_data = {
                'devis_id': devis.id,
                'appel_offres_id': appel_offres_id,
                'appel_offres_name': appel_offres_name,
                'societe_name': societe_name,
                'numero': devis.numero
            }
            
            # URL de pr√©visualisation
            preview_url = request.build_absolute_uri(f"/api/preview-saved-devis/{devis.id}/")
            logger.info(f"üîó URL de pr√©visualisation: {preview_url}")
            
            # G√©n√©rer le PDF avec le PDF Manager
            logger.info("üöÄ D√©but de la g√©n√©ration du PDF...")
            pdf_manager = PDFManager()
            success, message, s3_file_path, conflict_detected = pdf_manager.generate_andStore_pdf(
                document_type='devis_marche',
                preview_url=preview_url,
                societe_name=societe_name,
                force_replace=True,  # Toujours remplacer pour les modifications
                devis_id=devis.id,
                appel_offres_id=appel_offres_id,
                appel_offres_name=appel_offres_name,
                numero=devis.numero
            )
            logger.info(f"üìÑ R√©sultat g√©n√©ration PDF: success={success}, message={message}")
            
        else:
            logger.info("üìã Type: Devis normal")
            # Devis normal - r√©cup√©rer les donn√©es du chantier
            try:
                # V√©rifier si devis.chantier est d√©j√† un objet ou un ID
                if hasattr(devis.chantier, 'id'):
                    # C'est d√©j√† un objet Chantier
                    chantier = devis.chantier
                    chantier_name = chantier.chantier_name
                    chantier_id = chantier.id
                else:
                    # C'est un ID, faire la requ√™te
                    chantier = Chantier.objects.get(id=devis.chantier)
                    chantier_name = chantier.chantier_name
                    chantier_id = chantier.id
                logger.info(f"‚úÖ Chantier trouv√©: {chantier_name} (ID: {chantier_id})")
                
                # R√©cup√©rer la soci√©t√© du chantier
                if hasattr(chantier, 'societe') and chantier.societe:
                    societe_name = chantier.societe.name
                    logger.info(f"üìä Soci√©t√© du chantier: {societe_name}")
                else:
                    logger.warning("‚ö†Ô∏è Aucune soci√©t√© trouv√©e pour le chantier, utilisation de la soci√©t√© par d√©faut")
                    
            except Chantier.DoesNotExist:
                logger.error(f"‚ùå Chantier {devis.chantier} non trouv√© pour le devis normal")
                return Response({
                    'error': 'Chantier non trouv√© pour ce devis'
                }, status=status.HTTP_404_NOT_FOUND)
            
            # Donn√©es pour devis normal
            document_data = {
                'devis_id': devis.id,
                'chantier_id': chantier_id,
                'chantier_name': chantier_name,
                'societe_name': societe_name,
                'numero': devis.numero
            }
            
            # URL de pr√©visualisation
            preview_url = request.build_absolute_uri(f"/api/preview-saved-devis/{devis.id}/")
            logger.info(f"üîó URL de pr√©visualisation: {preview_url}")
            
            # G√©n√©rer le PDF avec le PDF Manager
            logger.info("üöÄ D√©but de la g√©n√©ration du PDF...")
            pdf_manager = PDFManager()
            success, message, s3_file_path, conflict_detected = pdf_manager.generate_andStore_pdf(
                document_type='devis_travaux',
                preview_url=preview_url,
                societe_name=societe_name,
                force_replace=True,  # Toujours remplacer pour les modifications
                devis_id=devis.id,
                chantier_id=chantier_id,
                chantier_name=chantier_name,
                numero=devis.numero
            )
            logger.info(f"üìÑ R√©sultat g√©n√©ration PDF: success={success}, message={message}")
        
        if success:
            response_data = {
                'success': True,
                'message': f'PDF du devis {devis.numero} r√©g√©n√©r√© et remplac√© avec succ√®s dans le Drive',
                'file_path': s3_file_path,
                'file_name': s3_file_path.split('/')[-1],
                'drive_url': f"/drive?path={s3_file_path}&sidebar=closed&focus=file",
                'redirect_to': f"/drive?path={s3_file_path}&sidebar=closed&focus=file",
                'document_type': 'devis_chantier' if devis.devis_chantier else 'devis_normal',
                'societe_name': societe_name,
                'devis_id': devis.id,
                'numero': devis.numero,
                'download_url': f"/api/download-pdf-from-s3?path={s3_file_path}",
                'conflict_detected': conflict_detected
            }
            
            if conflict_detected:
                response_data['conflict_message'] = f'Un fichier avec le m√™me nom existait d√©j√†. L\'ancien fichier a √©t√© d√©plac√© dans le dossier Historique et sera automatiquement supprim√© apr√®s 30 jours.'
                response_data['conflict_type'] = 'file_replaced'
            
            logger.info(f"‚úÖ PDF r√©g√©n√©r√© avec succ√®s pour le devis {devis.id}: {s3_file_path}")
            return JsonResponse(response_data)
        else:
            logger.error(f"‚ùå Erreur lors de la g√©n√©ration du PDF pour le devis {devis.id}: {message}")
            return JsonResponse({'success': False, 'error': message}, status=500)
            
    except Exception as e:
        error_msg = f'Erreur inattendue lors de la r√©g√©n√©ration du PDF: {str(e)}'
        logger.error(f"‚ùå {error_msg}")
        logger.error(f"‚ùå Traceback: {str(e)}", exc_info=True)
        return JsonResponse({'error': error_msg}, status=500)


@api_view(['GET'])
@permission_classes([AllowAny])
def get_devis_modification_info(request, devis_id):
    """
    R√©cup√®re les informations n√©cessaires pour la modification d'un devis
    """
    try:
        # R√©cup√©rer le devis existant
        try:
            devis = Devis.objects.get(id=devis_id)
        except Devis.DoesNotExist:
            return Response({
                'error': 'Devis non trouv√©'
            }, status=status.HTTP_404_NOT_FOUND)
        
        # R√©cup√©rer les donn√©es associ√©es
        societe = devis.societe if hasattr(devis, 'societe') else None
        societe_name = societe.name if societe else "Soci√©t√© par d√©faut"
        
        response_data = {
            'devis_id': devis.id,
            'numero': devis.numero,
            'devis_chantier': devis.devis_chantier,
            'societe_name': societe_name,
            'price_ht': float(devis.price_ht) if devis.price_ht else 0,
            'price_ttc': float(devis.price_ttc) if devis.price_ttc else 0,
            'tva_rate': float(devis.tva_rate) if devis.tva_rate else 20,
            'description': devis.description or '',
            'nature_travaux': devis.nature_travaux or '',
            'date_creation': devis.date_creation.isoformat() if devis.date_creation else None
        }
        
        # Ajouter les donn√©es sp√©cifiques selon le type
        if devis.devis_chantier:
            # Devis de chantier - r√©cup√©rer les donn√©es du chantier
            try:
                # V√©rifier si devis.chantier est d√©j√† un objet ou un ID
                if hasattr(devis.chantier, 'id'):
                    # C'est d√©j√† un objet Chantier
                    chantier = devis.chantier
                else:
                    # C'est un ID, faire la requ√™te
                    chantier = Chantier.objects.get(id=devis.chantier)
                response_data.update({
                    'chantier_id': chantier.id,
                    'chantier_name': chantier.chantier_name
                })
            except Chantier.DoesNotExist:
                response_data['chantier_id'] = None
                response_data['chantier_name'] = 'Chantier non trouv√©'
        else:
            # Devis normal - r√©cup√©rer les donn√©es du chantier
            try:
                # V√©rifier si devis.chantier est d√©j√† un objet ou un ID
                if hasattr(devis.chantier, 'id'):
                    # C'est d√©j√† un objet Chantier
                    chantier = devis.chantier
                else:
                    # C'est un ID, faire la requ√™te
                    chantier = Chantier.objects.get(id=devis.chantier)
                response_data.update({
                    'chantier_id': chantier.id,
                    'chantier_name': chantier.chantier_name
                })
            except Chantier.DoesNotExist:
                response_data['chantier_id'] = None
                response_data['chantier_name'] = 'Chantier non trouv√©'
        
        return JsonResponse(response_data)
        
    except Exception as e:
        error_msg = f'Erreur lors de la r√©cup√©ration des informations du devis: {str(e)}'
        logger.error(error_msg)
        return JsonResponse({'error': error_msg}, status=500)
