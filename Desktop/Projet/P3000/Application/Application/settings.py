"""
Django settings for Application project.

Generated by 'django-admin startproject' using Django 5.2.dev20240702005204.

For more information on this file, see
https://docs.djangoproject.com/en/dev/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/dev/ref/settings/
"""

from pathlib import Path
import os

# Charger les variables d'environnement depuis le fichier .env
def load_env_file():
    """Charge les variables d'environnement depuis le fichier .env"""
    env_file = BASE_DIR / '.env'
    if env_file.exists():
        with open(env_file, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key.strip()] = value.strip().strip('"').strip("'")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Charger le fichier .env
load_env_file()

# Charger les settings selon l'environnement
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

if DEBUG:
    # Charger les settings de développement
    from .settings_local import *
else:
    # Charger les settings de production
    from .settings_base import *


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-change-this-in-production')

# Configuration ALLOWED_HOSTS
ALLOWED_HOSTS = ['myp3000app.com', 'www.myp3000app.com', 'localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'api.apps.ApiConfig',
    'rest_framework',
    'frontend.apps.FrontendConfig',
    'corsheaders',
    
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',  # Middleware CSRF standard
    'api.simple_csrf_middleware.SimpleCSRFMiddleware',  # Notre middleware simple
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Configuration CORS
CORS_ALLOWED_ORIGINS = os.getenv('CORS_ALLOWED_ORIGINS', 'http://localhost:3000').split(',') if os.getenv('CORS_ALLOWED_ORIGINS') else ["http://localhost:3000"]

CORS_ALLOW_CREDENTIALS = True

# Configuration CSRF pour les API REST
CSRF_COOKIE_SAMESITE = 'Lax'
if DEBUG:
    # Configuration pour le développement
    CSRF_COOKIE_SECURE = False
    SESSION_COOKIE_SECURE = False
else:
    # Configuration pour la production
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True

CSRF_COOKIE_HTTPONLY = False  # Pour permettre à JS d'accéder au cookie
CSRF_TRUSTED_ORIGINS = os.getenv('CSRF_TRUSTED_ORIGINS', 'https://myp3000app.com,http://localhost:3000').split(',') if os.getenv('CSRF_TRUSTED_ORIGINS') else ["https://myp3000app.com", "http://localhost:3000"]
CSRF_USE_SESSIONS = False

# Configuration des sessions
SESSION_COOKIE_AGE = 3600  # 1 heure en secondes (au lieu de 4 heures)
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # Session expire à la fermeture du navigateur
SESSION_SAVE_EVERY_REQUEST = True  # Sauvegarder la session à chaque requête
SESSION_COOKIE_HTTPONLY = True  # Empêcher l'accès JavaScript aux cookies de session
SESSION_COOKIE_SAMESITE = 'Lax'  # Protection CSRF

# Désactiver CSRF pour toutes les URLs API
CSRF_EXEMPT_URLS = [
    r'^/api/.*$',  # Toutes les URLs commençant par /api/
]

# Configuration pour exempter les APIs de CSRF
CSRF_EXEMPT_PATTERNS = [
    r'^/api/.*$',
]

# Configuration des cookies de session (forcée pour la production)
# SESSION_COOKIE_SECURE = True  # Forcé à True pour la production # This line is now handled by the DEBUG conditional block above

ROOT_URLCONF = 'Application.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Application.wsgi.application'


# Database
# https://docs.djangoproject.com/en/dev/ref/settings/#databases

# Configuration de la base de données selon l'environnement
if DEBUG:
    # Configuration pour l'environnement local
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'p3000db_local',
            'USER': 'p3000user',
            'PASSWORD': 'Boumediene30',
            'HOST': 'localhost',
            'PORT': '5432',
        }
    }
else:
    # Configuration pour l'environnement de production
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'p3000db',
            'USER': 'p3000user',
            'PASSWORD': 'Boumediene30',
            'HOST': 'localhost',
            'PORT': '5432',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/dev/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/dev/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Configuration Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
}

# Configuration de sécurité pour la production
if not DEBUG:
    # HTTPS
    SECURE_SSL_REDIRECT = os.getenv('SECURE_SSL_REDIRECT', 'True').lower() == 'true'
    SECURE_HSTS_SECONDS = int(os.getenv('SECURE_HSTS_SECONDS', 31536000))
    SECURE_HSTS_INCLUDE_SUBDOMAINS = os.getenv('SECURE_HSTS_INCLUDE_SUBDOMAINS', 'True').lower() == 'true'
    SECURE_HSTS_PRELOAD = os.getenv('SECURE_HSTS_PRELOAD', 'True').lower() == 'true'
    SECURE_BROWSER_XSS_FILTER = os.getenv('SECURE_BROWSER_XSS_FILTER', 'True').lower() == 'true'
    SECURE_CONTENT_TYPE_NOSNIFF = os.getenv('SECURE_CONTENT_TYPE_NOSNIFF', 'True').lower() == 'true'
    
    # Cookies sécurisés
    # SESSION_COOKIE_SECURE = True # This line is now handled by the DEBUG conditional block above
    
    # Logs (désactivés pour éviter les erreurs de fichiers manquants)
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': True,
    }

# Default primary key field type
# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


